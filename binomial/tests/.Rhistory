ants <- read_delim("~/Berkeley/Spring 2019/Stat 151A/hw5_ants.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
head(ants)
boxplot(distance ~ colony, data = ants)
boxplot(ants$distance ~ ants$colony, data = ants)
head(ants)
boxplot(ants$Distance ~ ants$Colony, data = ants)
head(ants)
boxplot(ants$Mass ~ ants$Colony, data = ants)
head(ants)
head(ants)
coplot(ants$mass ~ ants$Distance | ants$Colony, data = ants, rows = 1)
coplot(ants$Mass ~ ants$Distance | ants$Colony, data = ants, rows = 1)
coplot(ants$Mass ~ ants$Distance | ants$Colony, data = ants)
boxplot(ants$Mass ~ ants$Colony, data = ants)
coplot(ants$Mass ~ ants$Distance | ants$Colony, data = ants)
plot(x = ants$Distance, y = ants$Mass)
boxplot(ants$Mass ~ ants$Distance, data = ants)
boxplot(ants$Mass ~ ants$Distance, data = ants)
boxplot(ants$Mass ~ ants$Distance, data = ants, main = "Mass of Ant vs Distance Travlled", xlab ="Distance", ylab = "Mass")
copot(ants$Mass ~ ants$Distance | ants$Headwidth * ants$Size.class)
coplot(ants$Mass ~ ants$Distance | ants$Headwidth * ants$Size.class)
coplot(ants$Mass ~ ants$Distance)
coplot(ants$Mass ~ ants$Distance | ants$Colony)
coplot(ants$Mass ~ ants$Distance | ants$Mass)
coplot(ants$Mass ~ ants$Distance | ants$Colony)
boxplot(ants$Mass ~ ants$Distance, data = ants, main = "Mass of Ant vs Distance Travlled", xlab ="Distance", ylab = "Mass")
coplot(ants$Mass ~ ants$Distance | ants$Colony)
coplot(ants$Mass ~ ants$Distance | ants$Colony, main = "Mass of Ant vs Distance Travlled", xlab ="Distance", ylab = "Mass")
coplot(ants$Mass ~ ants$Distance | ants$Colony, xlab ="Distance", ylab = "Mass")
g = lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + THIGH, data = bodyfat)
B_fat <- read_csv("~/Berkeley/Spring 2019/Stat 151A/BodyFat (1).csv")
```{r, message = FALSE}
B_fat <- read_csv("~/Berkeley/Spring 2019/Stat 151A/BodyFat (1).csv")
g = lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + THIGH, data = B_fat)
par(mfrow = c(2, 2))
plot(g)
View(B_fat)
bfat_lm <- lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat)
bfat_lm <- lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat)
bfat_lm
summary(bfat_lm)
summary(bfat_lm)$coefficients[,4]
summary(bfat_lm)
which.is.max(summary(bfat_lm)$coefficients[,4])
which.max(summary(bfat_lm)$coefficients[,4])
summary(bfat_lm)
which.max(summary(bfat_lm)$coefficients[,4])
summary(bfat_lm)
backwards_lm <- bfat_lm
summary(backwards_lm)
(summary(bfat_lm)$coefficients[,4]
(summary(bfat_lm)$coefficients[,4]
summary(bfat_lm)$coefficients[,4]
summary(backwards_lm)$coefficients[,4]
summary(backwards_lm)$coefficients[2:length(summary(backwards_lm)$coefficients),4]
summary(backwards_lm)$coefficients[,4]
length(summary(backwards_lm)$coefficients[,4])
summary(backwards_lm)$coefficients[2:length(summary(backwards_lm)$coefficients[,4]),4]
summary(backwards_lm)$coefficients[2:length(summary(backwards_lm)$coefficients[,4]),4]
library(mass)
library(MASS)
install.packages("leaps")
library(leaps)
backwards_lm <- regsubsets(BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, method = "backward")
backwards_lm
summary(backwards_lm)
dim(backwards_lm)
dim(summary(backwards_lm))
summary(backwards_lm)
summary(backwards_lm)$[, 5]
summary(backwards_lm)[,5]
summary(backwards_lm)[,3]
summary(backwards_lm)
test <- summary(backwards_lm)
test
length(test)
test[2]
summary(backwards_lm)
test[4]
test[5]
test[1]
test[2]
test[4]
test[5]
test[6]
test[7]
test[8]
test[1]
summary(backwards_lm)$which[,3]
step(bfat_lm, direction = "backward")
test_model <- update(bfat_lm, ~. -HEIGHT)
summary(test_model)
summary(test_model)$coefficients[3,1]
summary(test_model)
summary(test_model)$coefficients[3,0]
summary(test_model)
names(summary(test_model)$coefficients)
summary(test_model)
install.packages("SignifReg")
library(SignifReg)
SignifReg(bfat_lm, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
SignifReg(data = bfat_lm, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
SignifReg(scope = scope1, data = bfat_lm, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
SignifReg(scope = BODYFAT ~. , data = bfat_lm, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
SignifReg(scope = BODYFAT AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None")
SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None", trace = FALSE)
summary(SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None", trace = FALSE))
backwards <- SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None", trace = FALSE)
bfat_backwards <- SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "p-value", correction = "None", trace = FALSE)
bfat_backwards
bfat_forwards <- SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "forward", criterion = "p-value", correction = "None", trace = FALSE)
bfat_forwards
summary(bfat_forwards)
bfat_forwards
bfat_adjR <- SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "r-adj", correction = "None", trace = FALSE)
bfat_adjR
bfat_aic <- SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "AIC", correction = "None", trace = FALSE)
bfat_aic
bfat_bic <- SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "BIC", correction = "None", trace = FALSE)
bfat_bic
bfat_Cp <- SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "Cp", correction = "None", trace = FALSE)
bfat_Cp
library(DAAG)
install.packages("DAAG")
library(caret)
install.packages('caret', dependencies = TRUE)
install.packages("instaR")
updateR()
install.packages("installr");
updateR()
library(installr)
updateR()
updateR()
bfat_Cp
install.packages("caretEnsemble")
install.packages('caret', dependencies=c('ddalpha', 'recipes'))
versionInfo()
R --version
R.Version()
strsplit(version[['version.string']], ' ')[[1]][3]
R.Version()
install.packages("caret")
bfat_backwards
library(caret)
install.packages("caret")
bfat_forwards
summary(bfat_forwards)
summary(bfat_forwards)
summary(bfat_Cp)
summary(bfat_forwards)
summary(bfat_forwards)$df[2]
summary(bfat_forwards)
RSS(bfat_forwards)
c(crossprod(bfat_forwards$residuals))
summary(bfat_forwards)
length(bfat_forwards$coefficients)
nobs(bfat_forwards)
RSS_4 <- c(crossprod(bfat_forwards$residuals))
param_4 <- length(bfat_forwards$coefficients)
n_obs <-nobs(bfat_forwards)
GCV_4 <- RSS_4 + 2*(1+param_4)*RSS_4/n_obs
GCV_4
summary(bfat_forwards)
summary(bfat_Cp)
RSS_4 <- c(crossprod(bfat_forwards$residuals))
param_4 <- length(bfat_forwards$coefficients)
n_obs_4 <-nobs(bfat_forwards)
GCV_4 <- RSS_4 + 2*(1+param_4)*RSS_4/n_obs_4
GCV_4
RSS_3 <- c(crossprod(bfat_Cp$residuals))
param_3 <- length(bfat_Cp$coefficients)
n_obs_3 <-nobs(bfat_Cp)
GCV_3 <- RSS_3 + 2*(1+param_3)*RSS_3/n_obs_3
GCV_3
#summary(bfat_forwards)
#summary(bfat_Cp)
RSS_4 <- c(crossprod(bfat_forwards$residuals))
param_4 <- length(bfat_forwards$coefficients)
n_obs_4 <-nobs(bfat_forwards)
GCV_4 <- RSS_4 + 2*(1+param_4)*RSS_4/n_obs_4
GCV_4
RSS_3 <- c(crossprod(bfat_Cp$residuals))
param_3 <- length(bfat_Cp$coefficients)
n_obs_3 <-nobs(bfat_Cp)
GCV_3 <- RSS_3 + 2*(1+param_3)*RSS_3/n_obs_3
GCV_3
summary(bfat_forwards)
GCV_4
GCV_3
new_model <- lm(BODYFAT ~ ABDOMEN + WEIGHT + WRIST + FOREARM, data = B_fat)
new_model <- lm(BODYFAT ~ ABDOMEN + WEIGHT + WRIST + FOREARM, data = B_fat)
par(mfrow = c(2, 2))
plot(new_model)
plot(new_model)
#regression diagnostics
par(mfrow = c(2, 2))
plot(new_model)
#regression diagnostics
par(mfrow = c(2, 2))
plot(new_model)
plot(influence(new_model)$hat, type = "h")
abline(h = mean(influence(new_model)$hat))
abline(h = 2*mean(influence(new_model)$hat))
savings[order(influence(new_model)$hat, decreasing = T)[1:2],]
plot(influence(new_model)$hat, type = "h")
abline(h = mean(influence(new_model)$hat))
abline(h = 2*mean(influence(new_model)$hat))
B_fat[order(influence(new_model)$hat, decreasing = T)[1:2],]
B_fat[order(cook, decreasing=T)[1:5],]
cook <- cooks.distance(B_fat)
cook <- cooks.distance(new_model)
B_fat[order(cook, decreasing=T)[1:5],]
B_fat[order(cook, decreasing=T)[1:2],]
summary(new_model)
new_model_v2 <- lm(BODYFAT ~ ABDOMEN + WEIGHT + WRIST + FOREARM, data = B_fat[-c(39,221)])
new_model_v2 <- lm(BODYFAT ~ ABDOMEN + WEIGHT + WRIST + FOREARM, data = B_fat[-c(39,221)])
new_model$coefficients
new_model_v2$coefficients
summary(new_model_v2)
summary(new_model)
summary(new_model_v2)
new_model_v2 <- lm(BODYFAT ~ ABDOMEN + WEIGHT + WRIST + FOREARM, data = B_fat[-c(39,221),])
summary(new_model)
summary(new_model_v2)
new_model$coefficients
new_model_v2$coefficients
bfat_forwards
RSS_4 <- c(crossprod(bfat_forwards$residuals))
param_4 <- length(bfat_forwards$coefficients)
n_obs_4 <-nobs(bfat_forwards)
GCV_4 <- RSS_4 + 2*(1+param_4)*RSS_4/n_obs_4
GCV_4
RSS_3 <- c(crossprod(bfat_Cp$residuals))
param_3 <- length(bfat_Cp$coefficients)
n_obs_3 <-nobs(bfat_Cp)
GCV_3 <- RSS_3 + 2*(1+param_3)*RSS_3/n_obs_3
GCV_3
#fitting the model chosen to the data
new_model <- lm(BODYFAT ~ ABDOMEN + WEIGHT + WRIST + FOREARM, data = B_fat)
summary(new_model)
x_vector <- c(1:50, 1:50)
episilon <- rnorm(0, 10^2)
x_vector
d_vector <- c(rep.int(0, times = 50), rep.int(1, times = 50))
d_vector
episilon <- rnorm(0, 10^2)
x_vector <- c(1:50, 1:50)
d_vector <- c(rep.int(0, times = 50), rep.int(1, times = 50))
d_vector
length(d_vector)
Y = 10 +(1*x_vector) + (1*d_vector) + (2*x_vector*d_vector) + episilon
prob5 <- lm(Y ~X)
prob5 <- lm(Y ~ x_vector)
length(Y)
Y
Y = 10 +(1*x_vector) + (1*d_vector) + (2*x_vector%*%d_vector) + episilon
2*x_vector%*%d_vector
x_vector <- c(1:50, 1:50)
d_vector <- c(rep.int(0, times = 50), rep.int(1, times = 50))
x_vector*d_vector
2*(x_vector*d_vector)
2*(x_vector*d_vector) + length(episilon)
episilon <- rnorm(n = 100, mean = 0, 10^2)
Y = 10 +(1*x_vector) + (1*d_vector) + 2*(x_vector*d_vector) + episilon
prob5 <- lm(Y ~ x_vector)
summary(prob5)
prob5$coefficients
prob5_resid <- resid(prob5)
predicted_Y <- predict(prob5)
plot(prob5_resid, predicted_Y)
plot(predicted_Y, prob5_resid)
abline(a = 0, b = 0)
prob5_resid <- resid(prob5)
predicted_Y <- predict(prob5)
plot(predicted_Y, prob5_resid)
abline(a = 0, b = 0)
prob5_resid <- resid(prob5)
predicted_Y <- predict(prob5)
plot(predicted_Y, prob5_resid)
abline(a = 0, b = 0, color = "red")
prob5_resid <- resid(prob5)
predicted_Y <- predict(prob5)
plot(predicted_Y, prob5_resid)
abline(a = 0, b = 0, col = "red")
episilon <- rnorm(n = 100, mean = 0, 10^2)
x_vector <- c(1:50, 1:50)
d_vector <- c(rep.int(0, times = 50), rep.int(1, times = 50))
Y = 10 +(1*x_vector) + (1*d_vector) + 2*(x_vector*d_vector) + episilon
prob5 <- lm(Y ~ x_vector)
prob5$coefficients
prob5_resid <- resid(prob5)
predicted_Y <- predict(prob5)
plot(predicted_Y, prob5_resid)
abline(a = 0, b = 0, col = "red")
library(ggplot2)
install.packages("ggplot2")
install.packages("readr")
library(SignifReg)
library(readr)
install.packages("readr")
install.packages("readr")
View(ants)
library(readr)
install.packages("SignifReg")
install.packages("DAAG")
install.packages("tidyverse")
library(ggplot2)
library(readr)
library(SignifReg)
library(DAAG)
library(tidyverse)
ant_lm <- lm(ants$Mass ~ ants$Colony + ants$Distance +ants$Size.class, data = ants)
sumary(ant_lm)
summary(ant_lm)
par(mfrow = c(2, 2))
plot(ant_lm)
g = lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + THIGH, data = B_fat)
par(mfrow = c(2, 2))
plot(g)
View(ants)
smooth_mass <- ln(ants$Mass)
smooth_mass <- log(ants$Mass)
smooth_mass <- log(ants$Mass)
ant_smooth_lm <- lm(smooth_mass ~ ants$Colony + ants$Distance +ants$Size.class, data = ants)
par(mfrow = c(2, 2))
plot(ant_smooth_lm)
summary(ant_lm)
bfat_Cp <- SignifReg(scope = BODYFAT ~ AGE + WEIGHT + HEIGHT + ADIPOSITY + NECK + CHEST + ABDOMEN + HIP+ THIGH + KNEE + ANKLE + BICEPS + FOREARM + WRIST, data = B_fat, alpha = 0.05, direction = "backward", criterion = "Cp", correction = "None", trace = FALSE)
bfat_Cp
coplot(ants$Mass ~ ants$Distance | ants$Colony, xlab ="Distance", ylab = "Mass")
source('~/Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/R/checkers.R', echo=TRUE)
source('~/Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/R/auxillary.R', echo=TRUE)
source('~/Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/R/main.R', echo=TRUE)
bin1 <- bin_variable(10, 0.3)
class(bin1)
summary(bin1)
bin1
summary.binvar <- function(object){
summary_list <- c(object[1],
object[2],
aux_mean(object[1], object[2]),
aux_variance(object[1], object[2]),
aux_mode(object[1], object[2]),
aux_skewness(object[1], object[2]),
aux_kurtosis(object[1], object[2]),
)
class(summary_list) <- "summary.binvar"
return(summary_list)
}
bin1
summary(bin1)
bin1[1]
aux_mean(bin1[1],bin1[2])
#' @export prints a list of the important stats of the trial/prob object
summary.binvar <- function(object){
summary_list <- c(object[1],
object[2],
aux_mean(object[1], object[2]),
aux_variance(object[1], object[2]),
aux_mode(object[1], object[2]),
aux_skewness(object[1], object[2]),
aux_kurtosis(object[1], object[2])
)
class(summary_list) <- "summary.binvar"
return(summary_list)
}
summary(bin1)
print.summary.binvar <- function(object){
cat("\"Summary Binomial\" \n\nParameters \n- number of trials: ", object[1], "\n- prob of success :", object[2],
"\n\nMeasures \n- mean    : ", object[3],
"\n- variance    : ", object[4],
"\n- mode    : ", object[5],
"\n- skewness    : ", object[6],
"\n- kurtosis   : ", object[7])
}
binsum1 <- summary(bin1)
binsum1
print.summary.binvar <- function(object){
cat("\"Summary Binomial\" \n\nParameters \n- number of trials: ", object[1], "\n- prob of success :", object[2],
"\n\nMeasures \n- mean    : ", object[3],
"\n- variance: ", object[4],
"\n- mode    : ", object[5],
"\n- skewness: ", object[6],
"\n- kurtosis: ", object[7])
}
binsum1
bin_mean <- function(trials, prob){
check_trials(trials)
check_prob(prob)
aux_mean(trials, prob)
}
bin_mean(10, 0.3)
bin_variance <- function(trials, prob){
check_trials(trials)
check_prob(prob)
aux_variance(trials, prob)
}
bin_mode <- function(trials, prob){
check_trials(trials)
check_prob(prob)
aux_mode(trials, prob)
}
bin_skewness <- function(trials, prob){
check_trials(trials)
check_prob(prob)
aux_skewness(trials, prob)
}
bin_kurtosis <- function(trials, prob){
check_trials(trials)
check_prob(prob)
aux_kurtosis(trials, prob)
}
bin_variance(10, 3)
bin_variance(10, 0.3)
bin_mode(10,0.3)
bin_skewness(10,0.3)
bin_kurtosis(10,0.3)
install.packages("testthat")
library(testthat)
getwd()
test_that("check prob fails with invalid prob") {
expect_error(check_prob(2))
expect_error(check_prob(-0.5))
expect_error(check_prob(0.3,0.2))
}
test_that("check prob fails with invalid prob", {
expect_error(check_prob(2))
expect_error(check_prob(-0.5))
expect_error(check_prob(0.3,0.2))
})
test_that("check prob fails with invalid prob", {
expect_error(check_prob(2))
expect_error(check_prob(-1.5))
expect_error(check_prob(0.3,0.2))
})
test_file("test_check_binomial.R")
getwd()
test_file("Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/tests/testthat/test_check_binomial.R")
test_file("Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/tests/testthat/test_check_binomial.R")
test_file("Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/tests/testthat/test_check_binomial.R")
test_file("Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/tests/testthat/test_check_binomial.R")
test_that("check prob fails with invalid prob", {
expect_error(check_prob(2))
#expect_error(check_prob(-1.5))
#expect_error(check_prob(0.3,0.2))
})
test_file("Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/tests/testthat/test_check_binomial.R")
test_that("check_prob works with valid prob", {
expect_true(check_prob(0.5))
expect_true(check_prob(0.5,0.3))
expect_true(check_prob(0.7))
})
test_that("check_prob works with valid prob", {
expect_true(check_prob(0.5))
expect_true(check_prob(0.6))
expect_true(check_prob(0.7))
})
test_file("Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/tests/testthat/test_check_binomial.R")
setwd("Berkeley/Spring 2019/Stat 133/hw-stat133/binomial/tests/testthat")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
test_file("test_check_binomial.R")
aux_mean(10, 0.5)
aux_mean(10, 0.5)
test_file("test_check_binomial.R")
test <- read.csv("~/Berkeley/Spring 2019/Stat 151A/test (3).csv", header = T, na.strings=c(""))
aux_variance(10, 0.5)
aux_mode(10, 0.5)
aux_skewness(10, 0.5)
(aux_kurtosis(10, 0.5)
aux_kurtosis(10, 0.5)
aux_kurtosis(10, 0.5)
test_file("test_check_binomial.R")
install.packages("devtools")
knitr::opts_chunk$set(collapse = T, comment = "#>")
library(binomial)
bin_variable(trials = 5, prob = 0.5)
bin_variable
bin_probability(success = 3, trials = 5, prob = 0.5)
bin_distribution(trials = 5, prob = 0.5)
bin_dist <- bin_distribution(trials = 5, prob = 0.5)
plot(bin_dist)
bin_cumt <- bin_cumulative(trials = 5, prob = 0.5)
plot(bin_cumt)
bin_cumt <- bin_cumulative(trials = 5, prob = 0.5)
plot(bin_cumt)
plot.bincum <- function(dist){
plot(dist$cumulative, xlab = "success", ylab = "probability", main = "plot of cumulative probability", type = "o")
}
bin_cumt <- bin_cumulative(trials = 5, prob = 0.5)
plot(bin_cumt)
devtools::load_all
setwd(..)
setwd("..")
setwd("..")
setwd("..")
setwd("binomial/R")
devtools::load_all
setwd("..")
devtools::test()
setwd("tests/")
devtools::test()
